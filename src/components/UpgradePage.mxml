<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="components.*"
		 xmlns:classes="classes.*"
		 enabled="{UIController.instance.deviceDisk.connected}"
		 mouseEnabled="{UIController.instance.deviceDisk.connected}"
		 >
	<s:creationComplete>
		<![CDATA[
			CONFIG::ON_PC {
				ExternalInterface.addCallback("FL_updateSetTransferInformation", FL_updateSetTransferInformation);
				ExternalInterface.addCallback("FL_updateCompleteTransfer", FL_updateCompleteTransfer);
				ExternalInterface.addCallback("FL_applyUpdate", FL_applyUpdate);
			}
		]]>
	</s:creationComplete>
	<fx:Script>
		<![CDATA[
			import classes.Constants;
			import classes.UIController;
			import classes.Utils;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.Base64Encoder;
			
			// ["none", "checking", "no_update", "found_update", "downloading", "updating", "updated"]
			[Bindable]
			private var status:String = "none";
			[Bindable]
			private var updateText:String = "";
			[Bindable]
			private var remoteVersion:String;
			[Bindable]
			private var downloadPercentage:Number = 0;
			
			private var loader:URLLoader;
			
			protected function btnCheck_clickHandler(event:MouseEvent):void
			{
				status = "checking";
				
				var service:HTTPService = new HTTPService();
				service.url = Constants.CHECK_UI_URL;
				trace(service.url);
				service.method = "GET";
				service.resultFormat = "text";
				service.addEventListener(ResultEvent.RESULT, uiCheckResultListener);
				service.showBusyCursor = true;
				service.send();
			}
			
			private function uiCheckResultListener(event:ResultEvent):void {
				var str:String = String(event.result);
				var ver:String = str.substr(str.indexOf("<version>")+9);
				ver = ver.substr(0, ver.indexOf("<"));
				remoteVersion = ver;
				if (parseFloat(remoteVersion) > parseFloat(UIController.instance.firmwareVersion)) {
					status = "found_update";
				}
				else {
					status = "no_update";
				}
			}
			
			protected function btnUpdate_clickHandler(event:MouseEvent):void
			{
				status = "downloading";
				
				loader = new URLLoader();
				loader.dataFormat = URLLoaderDataFormat.BINARY;
				loader.addEventListener(ProgressEvent.PROGRESS, progressHandler);
				loader.addEventListener(Event.COMPLETE, completeHandler);
				
				var request:URLRequest = new URLRequest();
				request.url = Constants.BUILT_INT_ZIP_URL;
				loader.load(request);
			}
			
			private function progressHandler(event:ProgressEvent):void
			{
				downloadPercentage = int(event.bytesLoaded*100 / event.bytesTotal);
				trace(event.bytesLoaded, event.bytesTotal, downloadPercentage);
			}
			
			private function completeHandler(event:Event):void
			{
				downloadPercentage = 100;
				
				setTimeout(copyFirmware2Pc, 30);
			}
			
			private function copyFirmware2Pc():void
			{
				var buf:ByteArray = loader.data;
				var base64Enc:Base64Encoder = new Base64Encoder();
				base64Enc.encodeBytes(buf, 0, buf.length);
				var str:String = base64Enc.toString();
				str = str.split("\n").join("");
				
				var ret:String = "1";
				CONFIG::ON_PC {
					ret = ExternalInterface.call("F2C_saveFileFromBase64", UIController.instance.downloadDirectory+"builtIn.zip,"+str);
					if (ret == "1") {
						status = "updating";
						setTimeout(startUpdate, 30);
					}
				}
			}
			
			private function startUpdate():void
			{
				CONFIG::ON_PC {
					ExternalInterface.call("F2C_updateFirmware", UIController.instance.downloadDirectory+"builtIn.zip");
				}
			}
			
			protected function btnCancel_clickHandler(event:MouseEvent):void
			{
				status = "none";
				downloadPercentage = 0;
				
				if (loader) {
					loader.removeEventListener(ProgressEvent.PROGRESS, progressHandler);
					loader.removeEventListener(Event.COMPLETE, completeHandler);
					loader.close();
				}
			}
			
			private function FL_updateSetTransferInformation(args:String):void
			{
				updateText = "正在更新系统文件("+args+")...";
			}
			
			private function FL_updateCompleteTransfer(args:String):void
			{
				UIController.instance.firmwareVersion = remoteVersion;
				status = "updated";
			}
			
			private function FL_applyUpdate(args:String):void
			{
				updateText = "正在应用系统更新，切勿断开USB连接";
			}
		]]>
	</fx:Script>
	<fx:Binding source="downloadPercentage" destination="downloadBar.rcPercentage.percentWidth"/>
	<s:Rect width="100%" height="100%" radiusX="8" topLeftRadiusX="0">
		<s:fill>
			<s:SolidColor color="#ffffff"/>
		</s:fill>
	</s:Rect>
	<s:Rect left="10" top="10" right="10" bottom="10" radiusX="8">
		<s:fill>
			<s:SolidColor color="#efefef"/>
		</s:fill>
	</s:Rect>
	<s:VGroup left="30" top="50" right="30" bottom="30" horizontalAlign="center" gap="12" paddingTop="30">
		<s:HGroup width="90%" verticalAlign="baseline">
			<s:Label text="系统升级" fontSize="18"/>
			<s:Spacer width="100%"/>
			<components:KPButton id="btnCheck"
								 text="检查更新"
								 width="80" height="25"
								 click="btnCheck_clickHandler(event)"
								 />
		</s:HGroup>
		<s:BorderContainer width="85%" height="60"
						   borderColor="#cccccc" borderWeight="1">
			<s:Label width="100%" height="100%" textAlign="center" verticalAlign="middle" text="当前系统版本：{UIController.instance.firmwareVersion}"/>
		</s:BorderContainer>
		<s:BorderContainer id="panel" width="85%" height="150" visible="{status != 'none'}"
						   backgroundColor="#efefef" borderColor="#efefef" borderWeight="0">
			<s:HGroup horizontalAlign="center" paddingTop="60" paddingBottom="40" gap="8" width="100%"
					  visible="{status == 'checking'}" includeInLayout="{status == 'checking'}">
				<components:AnimatedGifImage source="assets/loading.gif"/>
				<s:Label text="连线检查中..." height="32" verticalAlign="middle"/>
			</s:HGroup>
			<s:Label width="100%" top="30" textAlign="center" verticalAlign="top"
					 text="您的设备已经是最新的系统版本^_^"
					 visible="{status == 'no_update'}" includeInLayout="{status == 'no_update'}"/>
			<s:VGroup width="100%" gap="12" paddingTop="20" paddingRight="0" paddingBottom="20" paddingLeft="0"
					  visible="{status=='found_update' || status=='downloading' || status=='updating'}" includeInLayout="{status=='found_update' || status=='downloading' || status=='updating'}">
				<s:HGroup width="100%" gap="8" verticalAlign="baseline">
					<s:Label text="发现新的系统版本：{remoteVersion}"/>
					<s:Spacer width="100%"/>
					<components:KPButton id="btnUpdate" text="开始更新" width="80" height="25" click="btnUpdate_clickHandler(event)"/>
					<components:KPButton id="btnCancel" text="取消更新" width="80" height="25" backgroundColor="#ee7119" click="btnCancel_clickHandler(event)"/>
				</s:HGroup>
				<s:Spacer height="1"/>
				<components:ProgressBar id="downloadBar" width="100%" height="22" progressText="下载系统文件：{downloadPercentage}%"
										visible="{status == 'downloading'}" includeInLayout="{status == 'downloading'}"/>
				<s:HGroup horizontalAlign="center" width="100%"
						  visible="{status == 'updating'}" includeInLayout="{status == 'updating'}">
					<components:AnimatedGifImage source="assets/loading.gif"/>
					<s:Label text="{updateText}" height="32" verticalAlign="middle"/>
				</s:HGroup>
			</s:VGroup>
			<s:Label width="100%" top="30" textAlign="center" verticalAlign="top"
					 text="更新已完成，请重新启动E巧派"
					 visible="{status == 'updated'}" includeInLayout="{status == 'updated'}"/>
		</s:BorderContainer>
	</s:VGroup>
</s:Group>
