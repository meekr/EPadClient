<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="components.*"
		 creationComplete="group1_creationCompleteHandler(event)"
		 >
	<fx:Script>
		<![CDATA[
			import classes.Converter;
			import classes.DataController;
			import classes.MediaController;
			import classes.MediaItem;
			import classes.MediaItemType;
			import classes.UIController;
			
			import events.DeviceConnectionChangeEvent;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			[Bindable]
			private var selectedLocalIndex:Number = 0;
			
			[Bindable]
			private var selectedDeviceIndex:Number = 0;
			
			private var items4PicturePopulated:Boolean;
			private var items4AudioPopulated:Boolean;
			private var items4VideoPopulated:Boolean;
			
			
			protected function changeLocalIndex(index:Number):void
			{
				if (index != selectedLocalIndex)
				{
					selectedLocalIndex = index;
					
					var so:SharedObject = SharedObject.getLocal("localPath4Media");
					switch (selectedLocalIndex)
					{
						case 0:
							localPath.text = so.data.picture;
							populateMediaList(localPath.text);
							break;
						case 1:
							localPath.text = so.data.audio;
							populateMediaList(localPath.text);
							break;
						case 2:
							localPath.text = so.data.video;
							populateMediaList(localPath.text);
							break;
					}
				}
			}
			
			protected function changeDeviceIndex(index:Number):void
			{
				if (index != selectedDeviceIndex)
				{
					selectedDeviceIndex = index;
				}
			}
			
			protected function btnBrowse_clickHandler(event:MouseEvent):void
			{
				CONFIG::ON_PC {
					var ret:String = ExternalInterface.call("F2C_getLocalMediaPath", "");
					if (ret && ret.length > 0)
					{
						switch (selectedLocalIndex)
						{
							case 0:
								items4PicturePopulated = false;
								break;
							case 1:
								items4AudioPopulated = false;
								break;
							case 2:
								items4VideoPopulated = false;
								break;
						}
						populateMediaList(ret);
					}
				}
			}
			
			private function populateMediaList(directory:String):void
			{
				CONFIG::ON_PC {
					if (directory && directory.length>0)
					{
						var so:SharedObject = SharedObject.getLocal("localPath4Media");
						var f2c_method:String;
						var itemsCollection:ArrayCollection;
						var mediaType:String;
						switch (selectedLocalIndex)
						{
							case 0:
								so.data.picture = directory;
								if (!items4PicturePopulated)
								{
									f2c_method = "F2C_getLocalPictures";
									items4PicturePopulated = true;
								}
								itemsCollection = MediaController.instance.mediaItems4Picture;
								mediaType = MediaItemType.PICTURE;
								break;
							case 1:
								so.data.audio = directory;
								if (!items4AudioPopulated)
								{
									f2c_method = "F2C_getLocalAudios";
									items4AudioPopulated = true;
								}
								itemsCollection = MediaController.instance.mediaItems4Audio;
								mediaType = MediaItemType.AUDIO;
								break;
							case 2:
								so.data.video = directory;
								if (!items4VideoPopulated)
								{
									f2c_method = "F2C_getLocalVideos";
									items4VideoPopulated = true;
								}
								itemsCollection = MediaController.instance.mediaItems4Video;
								mediaType = MediaItemType.VIDEO;
								break;
						}
						so.flush();
						
						localPath.text = directory;
						
						if (f2c_method && f2c_method.length > 0)
						{
							var files:String = ExternalInterface.call(f2c_method, directory);
							
							// update data
							itemsCollection.removeAll();
							var items:Array = files.split(",");
							for each (var str:String in items)
							{
								var filepath:String = str.split("#")[0];
								var name:String = filepath.substr(filepath.lastIndexOf("\\")+1);
								
								var item:MediaItem = new MediaItem();
								item.fileUrl = filepath;
								item.type = mediaType;
								item.name = name;
								item.fileSizeInBytes = parseInt(str.split("#")[1]);
								
								itemsCollection.addItem(item);
							}
						}
						
						lstLocal.dataProvider = itemsCollection;
					}
				}
			}
			
			protected function btnDeviceDeleteSelected_clickHandler(event:MouseEvent):void
			{
				for each (var item:MediaItem in MediaController.instance.itemsOnDevice)
				{
					if (item.selected)
					{
						CONFIG::ON_PC {
							ExternalInterface.call("F2C_deleteDeviceMedia", item.type + "," + item.fileUrl);
							var idx:int = MediaController.instance.itemsOnDevice.getItemIndex(item);
							MediaController.instance.itemsOnDevice.removeItemAt(idx);
						}
					}
				}
			}
			
			protected function btnDeviceSelectAll_clickHandler(event:MouseEvent):void
			{
				for each (var item:MediaItem in MediaController.instance.itemsOnDevice)
				{
					item.selected = true;
				}
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				var so:SharedObject = SharedObject.getLocal("localPath4Media");
				localPath.text = so.data.picture;
				populateMediaList(localPath.text);
				MediaController.instance.getDeviceMediaItems();
				
				UIController.instance.deviceDisk.addEventListener(DeviceConnectionChangeEvent.name, deviceConnectionChangeHandler);
			}
			
			private function deviceConnectionChangeHandler(event:DeviceConnectionChangeEvent):void
			{
				MediaController.instance.getDeviceMediaItems();
			}
			
			protected function btnTransfer2Device_clickHandler(event:MouseEvent):void
			{
				var itemsCollection:ArrayCollection;
				switch (selectedLocalIndex)
				{
					case 0:
						itemsCollection = MediaController.instance.mediaItems4Picture;
						break;
					case 1:
						itemsCollection = MediaController.instance.mediaItems4Audio;
						break;
					case 2:
						itemsCollection = MediaController.instance.mediaItems4Video;
						break;
				}
				
				// convert selected
				for each (var item:MediaItem in itemsCollection)
				{
					if (!item.selected) continue;
					var converter:Converter = new Converter();
					converter.sourceFile = item.fileUrl;
					switch (selectedLocalIndex)
					{
						case 0:
							converter.mediaType = MediaItemType.PICTURE;
							break;
						case 1:
							converter.mediaType = MediaItemType.AUDIO;
							break;
						case 2:
							converter.mediaType = MediaItemType.VIDEO;
							break;
					}
					MediaController.instance.addConvertTask(converter);
					item.converter = converter;
				}
				MediaController.instance.startConverting();
			}
			
			protected function btnTransfer2Local_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Binding source="UIController.instance.deviceDisk.usage" destination="deviceProgressBar.rcPercentage.percentWidth"/>
	
	<!-- left -->
	<s:Group left="0" top="0" right="418" bottom="0">
		<!-- background -->
		<s:Rect left="0" top="0" right="0" bottom="0" radiusX="8">
			<s:fill>
				<s:BitmapFill source="@Embed(source='assets/local-area-top-bg.png')" fillMode="repeat"/>
			</s:fill>
		</s:Rect>
		
		<!-- content -->
		<s:Image left="{81+selectedLocalIndex*48}" top="8" source="@Embed(source='assets/top-bar-item-bg.png')" width="57" height="47">
			<s:filters>
				<s:DropShadowFilter distance="2" angle="270" blurY="1" alpha="0.1"/>
			</s:filters>
		</s:Image>
		<s:Rect left="0" top="40" right="0" bottom="0" radiusX="8" topLeftRadiusX="0" topRightRadiusX="0">
			<s:fill>
				<s:BitmapFill source="@Embed(source='assets/white-dot.png')" fillMode="repeat"/>
			</s:fill>
		</s:Rect>
		<s:HGroup left="0" top="11" right="0" height="28" gap="17">
			<s:Spacer width="5"/>
			<s:Label text="本地" height="100%" fontSize="17" color="#000000"/>
			<s:Spacer width="5"/>
			<s:Label text="图 片" height="100%" verticalAlign="middle" fontSize="13" color="#2674d0" click="changeLocalIndex(0)"/>
			<s:Label text="音 乐" height="100%" verticalAlign="middle" fontSize="13" color="#2674d0" click="changeLocalIndex(1)"/>
			<s:Label text="视 频" height="100%" verticalAlign="middle" fontSize="13" color="#2674d0" click="changeLocalIndex(2)"/>
			<s:Spacer width="100%"/>
		</s:HGroup>
		<s:HGroup left="0" top="50" right="0" height="66" paddingLeft="10" paddingRight="10" gap="10">
			<s:Image source="@Embed(source='assets/computer.png')" width="65" height="50"/>
			<s:VGroup gap="5" width="100%">
				<s:Label text="浏览我的电脑" fontSize="13" color="#b8b8b8"/>
				<s:HGroup gap="10" width="100%">
					<s:TextArea id="localPath" width="100%" height="25" enabled="false" alpha="0.5"/>
					<components:KPButton id="btnBrowse"
										 backgroundColor="#72af0a"
										 text="浏览" width="80" height="25" fontSize="13" click="btnBrowse_clickHandler(event)"/>
				</s:HGroup>
			</s:VGroup>
		</s:HGroup>
		<s:Image left="0" top="106" right="0" source="@Embed(source='assets/gradient-line.png')" height="1"/>
		<s:List id="lstLocal" left="8" top="107" right="8" bottom="8"
				skinClass="skins.MyListSkin" borderColor="#FFFFFF"
				itemRenderer="renderers.MediaItemRenderer"
				horizontalScrollPolicy="off">
			<s:layout>
				<s:VerticalLayout paddingLeft="0" paddingTop="5" paddingRight="0" paddingBottom="5" gap="0"/>
			</s:layout>
		</s:List>
		<s:Rect top="110" right="-45" width="48" height="100" topRightRadiusX="8" bottomRightRadiusX="8">
			<s:fill>
				<s:SolidColor color="#FFFFFF"/>
			</s:fill>
		</s:Rect>
		<components:KPButton id="btnTransfer2Device"
							 top="116" right="-40"
							 backgroundColor="#75b508"
							 click="btnTransfer2Device_clickHandler(event)"
							 enabled="{MediaController.instance.convertingPool.length == 0}"
							 mouseEnabled="{MediaController.instance.convertingPool.length == 0}"
							 width="36" height="88">
		</components:KPButton>
		<s:Image source="@Embed(source='assets/white-arrow-right.png')" width="17" height="29" right="-30" top="148"/>
	</s:Group>
	
	<!-- right -->
	<s:Group top="0" right="0" bottom="0" width="357">
		<!-- background -->
		<s:Rect left="0" top="0" right="0" bottom="0">
			<s:fill>
				<s:BitmapFill source="@Embed(source='assets/e-pad-bg.png')" fillMode="scale"/>
			</s:fill>
		</s:Rect>
		
		<!-- content -->
		<s:Image right="{180-122*selectedDeviceIndex}" top="10" source="@Embed(source='assets/device-bar-bg.png')" width="129" height="41">
			<s:filters>
				<s:DropShadowFilter distance="1" angle="270" blurY="1" alpha="0.02"/>
			</s:filters>
		</s:Image>
		<s:Image right="206" top="10" source="@Embed(source='assets/device-title-pad.png')" width="68" height="40" click="changeDeviceIndex(0)"/>
		<s:Image right="83" top="10" source="@Embed(source='assets/device-title-card.png')" width="74" height="40" click="changeDeviceIndex(1)"/>
		<s:Group left="21" top="43" right="21" bottom="0">
			<s:Rect left="0" top="0" right="0" bottom="42" radiusX="8">
				<s:fill>
					<s:SolidColor color="#fbe8cd"/>
				</s:fill>
			</s:Rect>
			<s:List id="lstDevice" left="6" top="6" right="6" bottom="77"
					skinClass="skins.MyListSkin" borderColor="#fbe8cd"
					itemRenderer="renderers.MediaItemRenderer"
					dataProvider="{MediaController.instance.itemsOnDevice}"
					horizontalScrollPolicy="off">
				<s:layout>
					<s:VerticalLayout paddingLeft="0" paddingTop="5" paddingRight="0" paddingBottom="5" gap="0"/>
				</s:layout>
			</s:List>
			<s:Label backgroundColor="#cccccc" left="0" right="0" bottom="75" height="1"/>
			<s:HGroup left="0" right="0" bottom="44" height="30" verticalAlign="middle">
				<s:Spacer width="100%"/>
				<components:KPButton id="btnDeviceSelectAll"
									 backgroundColor="#72af0a"
									 verticalCenter="2"
									 text="全选" width="80" height="25" fontSize="13" click="btnDeviceSelectAll_clickHandler(event)"/>
				<components:KPButton id="btnDeviceDeleteSelected"
									 backgroundColor="#fd4122"
									 verticalCenter="2"
									 text="删除" width="80" height="25" fontSize="13" click="btnDeviceDeleteSelected_clickHandler(event)"/>
				<s:Spacer width="100%"/>
			</s:HGroup>
			<s:HGroup left="0" right="0" bottom="17">
				<s:Label text="{UIController.instance.deviceDisk.volumeStatus}"/>
				<s:Spacer width="10"/>
				<components:ProgressBar id="deviceProgressBar" width="100%" visible="{UIController.instance.deviceDisk.connected}" includeInLayout="{UIController.instance.deviceDisk.connected}"/>
			</s:HGroup>
		</s:Group>
		
		<s:Rect top="234" right="354" width="48" height="100" topLeftRadiusX="8" bottomLeftRadiusX="8">
			<s:fill>
				<s:SolidColor color="#fcac6f"/>
			</s:fill>
		</s:Rect>
		<components:KPButton id="btnTransfer2Local"
							 top="240" right="360"
							 backgroundColor="#07b1dc"
							 click="btnTransfer2Local_clickHandler(event)"
							 width="36" height="88">
		</components:KPButton>
		<s:Image source="@Embed(source='assets/white-arrow-left.png')" width="17" height="29" right="370" top="274"/>
	</s:Group>
	
</s:Group>